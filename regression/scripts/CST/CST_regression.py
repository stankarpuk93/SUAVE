# test_Weights.py

import SUAVE
import numpy as np
from SUAVE.Core import Units
from SUAVE.Core import (
    Data, Container,
)

def main():

    # E186 airfoil coordinates
    E186upper = np.array([   [1.00000,  0.00000],
                        [0.99654, -0.00021],
                        [0.98619, -0.00066],
                        [0.96907, -0.00091],
                        [0.94552, -0.00050],
                        [0.91612,  0.00085],
                        [0.88154,  0.00322],
                        [0.84239,  0.00663],
                        [0.79936,  0.01104],
                        [0.75314,  0.01637],
                        [0.70447,  0.02249],
                        [0.65412,  0.02922],
                        [0.60283,  0.03631],
                        [0.55138,  0.04346],
                        [0.50052,  0.05022],
                        [0.45073,  0.05600],
                        [0.40224,  0.06042],
                        [0.35529,  0.06327],
                        [0.31007,  0.06445],
                        [0.26677,  0.06396],
                        [0.22558,  0.06192],
                        [0.18678,  0.05861],
                        [0.15079,  0.05424],
                        [0.11800,  0.04895],
                        [0.08874,  0.04289],
                        [0.06330,  0.03620],
                        [0.04191,  0.02904],
                        [0.02475,  0.02159],
                        [0.01196,  0.01411],
                        [0.00367,  0.00694],
                        [0.0000,  0.0000]])
    
    E186lower = np.array([[0.0000,  0.0000],
                        [0.00225, -0.00468],
                        [0.01046, -0.01002],
                        [0.02370, -0.01530],
                        [0.04187, -0.02018],
                        [0.06484, -0.02455],
                        [0.09244, -0.02833],
                        [0.12444, -0.03149],
                        [0.16054, -0.03404],
                        [0.20040, -0.03597],
                        [0.24360, -0.03732],
                        [0.28968, -0.03812],
                        [0.33815, -0.03839],
                        [0.38847, -0.03819],
                        [0.44007, -0.03754],
                        [0.49239, -0.03649],
                        [0.54483, -0.03507],
                        [0.59681, -0.03332],
                        [0.64773, -0.03127],
                        [0.69702, -0.02896],
                        [0.74414, -0.02643],
                        [0.78854, -0.02372],
                        [0.82972, -0.02088],
                        [0.86723, -0.01793],
                        [0.90062, -0.01493],
                        [0.92952, -0.01190],
                        [0.95357, -0.00881],
                        [0.97275, -0.00555],
                        [0.98725, -0.00255],
                        [0.99667, -0.00061],
                        [1.00000,  0.00000]])
    
    CST_lower = [-0.10922276, -0.07140969, -0.16068774]
    CST_upper = [0.14390616,  0.23619356, -0.03892426]

    # create CST airfoil
    CST      = SUAVE.Methods.Geometry.Two_Dimensional.Cross_Section.Airfoil.CST.airfoil_from_CST() 
    ylower,x = CST.create_CST_airfoil(CST_lower,0)
    yupper,x = CST.create_CST_airfoil(CST_upper,0)

    area_upper = np.trapz(yupper,x)
    area_lower = np.trapz(ylower,x)

    areaCSTupper = np.trapz(E186upper[:,1],E186upper[:,0])
    areaCSTlower = np.trapz(E186lower[:,1],E186lower[:,0])
    
    
    # regression values    
    actual                          = Data()
    actual.area_upper               = area_upper
    actual.area_lower               = area_lower
    
    # error calculations
    error                         = Data()
    error.area_upper              = abs(areaCSTupper + area_upper)
    error.area_lower              = abs(areaCSTlower - area_lower)
 
    for k,v in error.items():
        assert(np.abs(v)<1E-4)    
      


# ----------------------------------------------------------------------        
#   Call Main
# ----------------------------------------------------------------------    

if __name__ == '__main__':
    main()    

